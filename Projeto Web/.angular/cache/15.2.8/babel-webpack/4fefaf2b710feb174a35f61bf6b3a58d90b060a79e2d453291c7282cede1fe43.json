{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DoadorService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = \"http://localhost:8080/api/doadores\";\n  }\n  registrarDoacao(doador) {\n    return this.http.post(this.apiUrl, doador);\n  }\n  // Método GET que aceita o CPF como parâmetro\n  getDoadorByCpf(doador) {\n    const url = `${this.apiUrl}?cpf=${doador.cpf}`;\n    return this.http.get(url);\n  }\n}\nDoadorService.ɵfac = function DoadorService_Factory(t) {\n  return new (t || DoadorService)(i0.ɵɵinject(i1.HttpClient));\n};\nDoadorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DoadorService,\n  factory: DoadorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,aAAa;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADlB,WAAM,GAAG,oCAAoC;EACX;EAExCC,eAAe,CAACC,MAAc;IAC5B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAS,IAAI,CAACC,MAAM,EAAEF,MAAM,CAAC;EACpD;EAEA;EACDG,cAAc,CAACH,MAAc;IAC3B,MAAMI,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,QAAQF,MAAM,CAACK,GAAG,EAAE;IAC9C,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAASF,GAAG,CAAC;EACnC;;AAbWR,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAW,SAAbX,aAAa;EAAAY,YAFZ;AAAM","names":["DoadorService","constructor","http","registrarDoacao","doador","post","apiUrl","getDoadorByCpf","url","cpf","get","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Acer\\Documents\\Engenharia de software\\Faculdade de engenharia de software\\ATIVIDADES EXTENSIONISTAS I\\Angular-Project\\projeto-social\\src\\app\\component\\doador\\service\\doador.service.ts"],"sourcesContent":["import { Endereco } from '@app/component/endereco/interface/enderecoInterface';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Doador } from '../interface/doadorInterface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoadorService {\n\n private apiUrl = \"http://localhost:8080/api/doadores\"; \n   constructor(private http: HttpClient) { }\n \n   registrarDoacao(doador: Doador): Observable<Doador> {\n     return this.http.post<Doador>(this.apiUrl, doador);\n   }\n\n   // Método GET que aceita o CPF como parâmetro\n  getDoadorByCpf(doador: Doador): Observable<Doador> {\n    const url = `${this.apiUrl}?cpf=${doador.cpf}`;\n    return this.http.get<Doador>(url);\n  }\n   \n }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}